---
# AtlasStack - Playbook de Provisionamento Ansible
# Exemplo de automação de configuração de servidores

- name: Provisionamento AtlasStack
  hosts: all
  become: yes
  vars:
    app_user: atlasstack
    app_dir: /opt/atlasstack
    log_dir: /var/log/atlasstack
    
  tasks:
    - name: Atualizar cache do apt
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      
    - name: Instalar dependências essenciais
      apt:
        name:
          - curl
          - git
          - vim
          - htop
          - python3-pip
          - docker.io
        state: present
      when: ansible_os_family == "Debian"
      
    - name: Criar usuário da aplicação
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        create_home: yes
        state: present
        
    - name: Criar diretórios da aplicação
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ app_dir }}"
        - "{{ log_dir }}"
        - "{{ app_dir }}/config"
        - "{{ app_dir }}/scripts"
        
    - name: Configurar Docker
      service:
        name: docker
        state: started
        enabled: yes
        
    - name: Adicionar usuário ao grupo docker
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes
        
    - name: Copiar scripts de diagnose
      copy:
        src: scripts/diagnose_logs.sh
        dest: "{{ app_dir }}/scripts/diagnose_logs.sh"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        
    - name: Configurar log rotation
      template:
        src: templates/logrotate.j2
        dest: /etc/logrotate.d/atlasstack
        owner: root
        group: root
        mode: '0644'
      when: false  # Template precisa ser criado
      
    - name: Configurar firewall UFW
      ufw:
        state: enabled
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '22'
        - '80'
        - '443'
      when: ansible_os_family == "Debian"
      
    - name: Verificar status dos serviços
      service:
        name: "{{ item }}"
        state: started
      loop:
        - docker
      register: service_status
      
    - name: Exibir informações do sistema
      debug:
        msg: |
          Sistema: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Hostname: {{ ansible_hostname }}
          IP: {{ ansible_default_ipv4.address }}
          CPU: {{ ansible_processor_vcpus }} cores
          Memória: {{ ansible_memtotal_mb }} MB
          
    - name: Criar arquivo de versão
      copy:
        content: |
          AtlasStack Provision
          Data: {{ ansible_date_time.iso8601 }}
          Servidor: {{ ansible_hostname }}
          Versão: 1.0.0
        dest: "{{ app_dir }}/VERSION"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
        
  handlers:
    - name: Restart docker
      service:
        name: docker
        state: restarted
